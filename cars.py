#!/usr/bin/env python3

import emails # My code
import json
import locale
import os # My code
import reports # My code
import sys
from reportlab.graphics.shapes import Drawing # My code
from reportlab.graphics.charts.piecharts import Pie # My code

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename, encoding = "UTF-8") as json_file: # Without explicitly setting encoding to UTF-8
    data = json.load(json_file)                         # é loads as Ã© in Murciélago in Windows
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

# My code starts here #VVV###########################################
    # Also handle max sales
  max_sales = {"total_sales": 0}
  for item in data: # COULD USE PREVIOUS LOOP FOR THIS BUT THIS WAY I CAN SEPARATE MY OWN CODE
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item
    # Also handle most popular car_year
  sales_per_year = {}
  for item in data: # COULD USE PREVIOUS LOOP FOR THIS BUT THIS WAY I CAN SEPARATE MY OWN CODE
    item_year = item["car"]["car_year"]
    # Could code golf this if-else block part with dict.get, but is it good practice?
    if item_year not in sales_per_year:
      sales_per_year[item_year] = item["total_sales"]
    else:
      sales_per_year[item_year] += item["total_sales"]
    # Find out the year of car with the most sales
    most_popular_year = 0
    most_popular_year_sales = 0
    for item in sales_per_year.items():
      if item[1] > most_popular_year_sales:
                most_popular_year = item[0]
                most_popular_year_sales = item[1]
# My code ends here #^^^#############################################

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),

# My code starts here #VVV###########################################
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(
      most_popular_year, most_popular_year_sales),
# My code ends here #^^^#############################################
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
# My code starts here #VVV###########################################
  # Turn this into a PDF report
  summary_paragraph = summary[0] + "<br/>" + summary[1] + "<br/>" + summary[2]
  car_table = cars_dict_to_table(data)
  # sorts table by sales from most to least
  car_table = [car_table[0]] + sorted(car_table[1:], key = lambda x: x[3], reverse = True)

  # Adds a pie chart where each slice represents a table row (it's dense)
  report_pie = Pie(width = 3, height = 3)
  report_pie.data = []
  #report_pie.labels = [] # It's dense enough without the labels
  for item in car_table[1:]:
    report_pie.data.append(item[3])
    #report_pie.labels.append(item[1]) # It's dense enough without the labels
  report_chart = Drawing()
  report_chart.add(report_pie)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", summary_paragraph, report_chart, car_table)

  # Send the PDF report as an email attachment
  message = emails.generate(
                           "automation@example.com",
                           "{}@example.com".format(os.environ.get('USER')),
                           "Sales summary for last month",
                           summary_paragraph.replace("<br/>", "\n"), # Instead of calling summary[0:3] one by one again
                           "/tmp/cars.pdf"
                           )
  emails.send(message)
# My code ends here #^^^#############################################

if __name__ == "__main__":
  main(sys.argv)